#BlueJ class context
comment0.params=
comment0.target=Program()
comment0.text=\n\ contructor\ does\ nothing\ special\n\ \n
comment1.params=das
comment1.target=void\ setDefaultAllocSize(int)
comment1.text=\n\ setDefaultAllocSize\n\n\ sets\ the\ default\ alloc\ size\ for\ this\ program\n
comment10.params=line\ i
comment10.target=int\ parseInstruction(java.lang.String,\ int)
comment10.text=\n\ parseInstruction\n\n\ parses\ a\ line\ of\ text\ that\ contains\ a\ instruction\ and\ its\ arguments.\n\n\ @param\ line\ the\ entire\ line\ of\ text\ containing\ the\ instruction\n\ @param\ i\ \ \ \ the\ position\ in\ the\ line\ where\ the\ instruction\ begins\n\ @return\ \ \ \ \ a\ success/error\ code\ (0\ is\ success;\ anything\ else\ is\ failure)\n\ @see\ \ \ \ \ \ \ \ \#instrToInt\n\ @see\ \ \ \ \ \ \ \ \#parseArg\n\ @see\ \ \ \ \ \ \ \ \#parseLine\n
comment11.params=line
comment11.target=int\ parseLine(java.lang.String)
comment11.text=\n\ parseLine\n\n\ parses\ a\ single\ line\ of\ text\ from\ the\ file.\ \ If\ the\ line\ contains\ an\n\ instruction\ or\ a\ label\ then\ it\ is\ passed\ to\ the\ appropriate\ parse\n\ routine.\n\n\ @param\ line\ the\ line\ of\ text\ to\ parse\n\ @return\ a\ success/error\ code\ (0\ is\ success;\ anything\ else\ is\ failure)\n\ @see\ \#parseInstruction\n\ @see\ \#parseLabel\n\ @see\ \#load\n
comment12.params=
comment12.target=int\ fixOrphans()
comment12.text=\n\ fixOrphans\n\n\ is\ called\ once\ the\ entire\ program\ has\ been\ parsed.\ \ It\ resolves\ all\n\ forward\ references\ to\ labels.\n\ \n\ @return\ a\ success/error\ code\ (0\ is\ success;\ anything\ else\ is\ failure)\n
comment13.params=fileName\ verbose
comment13.target=int\ load(java.lang.String,\ boolean)
comment13.text=\n\ load\n\n\ opens\ a\ given\ file\ and\ sends\ the\ pidgin\ assembly\ program\ found\ within\ to\n\ the\ parse\ routines.\n\n\ @param\ fileName\ the\ filename\ of\ the\ file\ containing\ the\ code\n\ @param\ verbose\ \ if\ set\ 'true'\ this\ will\ print\ detailed\ output\ as\ it\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ parses\n\ @return\ \ \ \ \ \ \ \ \ 0\ is\ success;\ anthing\ else\ is\ a\ failure\ code\n\ @see\ \#parseLine\n\ \n
comment14.params=
comment14.target=void\ print()
comment14.text=\n\ print\n\n\ outputs\ the\ program\ in\ integer\ format\ to\ the\ console.\ \ (Used\ for\n\ debugging.)\n\ \n
comment15.params=
comment15.target=int[]\ export()
comment15.text=\n\ export\n\n\ converts\ the\ current\ program\ from\ an\ Vector\ of\ Integer\ to\ int[]\ that\n\ can\ be\ loaded\ into\ RAM\n\n\ @return\ the\ converted\ program\n\ @see\ RAM\n
comment2.params=
comment2.target=int\ getSize()
comment2.text=\n\ getSize\n\n\ returns\ the\ number\ of\ integers\ that\ make\ up\ the\ program\n\ \n
comment3.params=
comment3.target=int\ getDefaultAllocSize()
comment3.text=\n\ getDefaultAllocSize\n\n\ gets\ the\ default\ alloc\ size\ for\ this\ program\n
comment4.params=line\ i
comment4.target=int\ skipWhite(java.lang.String,\ int)
comment4.text=\n\ skipWhite\n\n\ given\ a\ current\ position\ in\ a\ string,\ this\ funciton\ determines\ where\ the\n\ next\ non-whitespace\ character\ is\n\n\ @param\ line\ \ the\ string\ to\ find\ the\ non-whitepsace\ character\ in\n\ @param\ i\ \ \ \ \ where\ to\ begin\ searching\n\ @return\ \ \ \ \ \ the\ location\ of\ the\ non-whitespace\ character\n\ \n
comment5.params=line\ i
comment5.target=int\ skipToken(java.lang.String,\ int)
comment5.text=\n\ skipToken\n\n\ given\ a\ current\ position\ in\ a\ string,\ this\ funciton\ determines\ where\ the\n\ next\ token\ begins\ (skipping\ the\ current\ token\ if\ any)\n\n\ @param\ line\ \ the\ string\ to\ find\ the\ next\ token\ in\n\ @param\ i\ \ \ \ \ where\ to\ begin\ searching\n\ @return\ \ \ \ \ \ the\ location\ of\ the\ next\ token\n\ \n
comment6.params=line\ i
comment6.target=java.lang.String\ getToken(java.lang.String,\ int)
comment6.text=\n\ getToken\n\n\ returns\ the\ substring\ containing\ the\ next\ contiguous\ set\ of\n\ non-whitespace\ characters\ in\ a\ given\ string\n\n\ @param\ line\ \ the\ string\ to\ extract\ the\ substring\ from\n\ @param\ i\ \ \ \ \ where\ to\ begin\ extracting\n\ @return\ \ \ \ \ \ the\ extracted\ substring\n\ \n
comment7.params=line\ i
comment7.target=int\ parseLabel(java.lang.String,\ int)
comment7.text=\n\ parseLabel\n\n\ parses\ a\ single\ label\ defintion\ found\ in\ the\ code\ and\ places\ it\ in\ the\n\ m_labels\ list\n\ \n\ @param\ line\ the\ entire\ line\ of\ text\ containing\ the\ instruction\n\ @param\ i\ \ \ \ the\ position\ in\ the\ line\ where\ the\ instruction\ begins.\ \ This\n\ \ \ \ \ \ \ \ \ \ \ \ \ <b>must</b>\ be\ the\ location\ of\ the\ starting\ colon\ ('\:')\n\ \ \ \ \ \ \ \ \ \ \ \ \ character\ \n\ @return\ \ \ \ \ a\ success/error\ code\ (0\ is\ success;\ anything\ else\ is\ failure)\n\ @see\ \ \ \ \ \ \ \ \#parseLine\n\ @return\ \ \ \ \ a\ success/error\ code\ (0\ is\ success;\ anything\ else\ is\n\ \ \ \ \ \ \ \ \ \ \ \ \ failure)\n
comment8.params=instr
comment8.target=int\ instrToInt(java.lang.String)
comment8.text=\n\ instrToInt\n\n\ parses\ a\ single\ instruction\ code\ to\ its\ integer\ equivalent\ using\ the\n\ constants\ defined\ in\ the\ CPU\ class\n\n\ @param\ instr\ the\ instruction\ code\ to\ parse\n\ @return\ \ \ \ \ \ the\ parsed\ instruction\ <b>or</b>\ a\ negative\ value\ indicating\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ an\ error\ occurred\ during\ the\ parse\n\ @see\ \ \ \ \ \ \ \ \ CPU\n
comment9.params=line\ i
comment9.target=int\ parseArg(java.lang.String,\ int)
comment9.text=\n\ parseArg\n\n\ parses\ a\ single\ instruction\ argument\n\n\ @param\ line\ the\ entire\ line\ of\ text\ containing\ the\ instruction\n\ @param\ i\ \ \ \ the\ position\ in\ the\ line\ where\ the\ instruction\ begins\n\ @return\ \ \ \ \ a\ success/error\ code\ (0\ is\ success;\ anything\ else\ is\ failure)\n\ @see\ \ \ \ \ \ \ \ \#parseInstruction\n\ \n
numComments=16
