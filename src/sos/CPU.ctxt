#BlueJ class context
comment0.params=ram
comment0.target=CPU(RAM)
comment0.text=\n\ CPU\ ctor\n\ \n\ Intializes\ all\ member\ variables.\n
comment1.params=th
comment1.target=void\ registerTrapHandler(CPU.TrapHandler)
comment1.text=\n\ registerTrapHandler\n\n\ allows\ SOS\ to\ register\ itself\ as\ the\ trap\ handler\ \n
comment10.params=v
comment10.target=void\ setLIM(int)
comment10.text=\n\ setLIM\n\ \n\ @param\ v\n\ \ \ \ \ \ \ \ \ \ \ \ the\ new\ value\ of\ the\ limit\ register\n
comment11.params=
comment11.target=void\ regDump()
comment11.text=\n\ regDump\n\ \n\ Prints\ the\ values\ of\ the\ registers.\ Useful\ for\ debugging.\n
comment12.params=instr
comment12.target=void\ printInstr(int[])
comment12.text=\n\ printIntr\n\ \n\ Prints\ a\ given\ instruction\ in\ a\ user\ readable\ format.\ Useful\ for\n\ debugging.\n\ \n\ @param\ instr\n\ \ \ \ \ \ \ \ \ \ \ \ the\ current\ instruction\n
comment13.params=
comment13.target=void\ run()
comment13.text=\n\ run()\n\ \n\ this\ method\ runs\n
comment14.params=register
comment14.target=boolean\ checkAccess(int)
comment14.text=\n\ checkAccess()\n\ \n\ @param\ register\n\ \ \ \ \ \ \ \ \ \ \ \ contents\ that\ contain\ the\ attempted\ access\ location\n\ \n\ \ \ \ \ \ \ \ \ \ \ \ Helper\ method\ to\ check\ if\ process\ is\ attempting\ to\ access\ a\n\ \ \ \ \ \ \ \ \ \ \ \ register\ that\ is\ less\ than\ the\ base\ register\ or\ greater\ than\n\ \ \ \ \ \ \ \ \ \ \ \ the\ limit\ register\n
comment15.params=register
comment15.target=void\ pushToStack(int)
comment15.text=\n\ pushToStack()\n\ \n\ @param\ register\n\ \ \ \ \ \ \ \ \ \ \ \ contains\ information\ to\ push\ to\ stack\ Helper\ method\ to\ push\n\ \ \ \ \ \ \ \ \ \ \ \ stuff\ onto\ the\ stack\n
comment16.params=content
comment16.target=void\ pushToStack2(int)
comment17.params=register
comment17.target=void\ popFromStack(int)
comment17.text=\n\ popFromStack()\n\ \n\ @param\ register\n\ \ \ \ \ \ \ \ \ \ \ \ to\ pop\ information\ to\ Helper\ method\ to\ pop\ stuff\ from\ the\n\ \ \ \ \ \ \ \ \ \ \ \ stack\n
comment18.params=
comment18.target=int\ popFromStack()
comment18.text=\n\ popFromStack()\n\ \n\ @param\ location\n\ \ \ \ \ \ \ \ \ \ \ \ to\ be\ offset\ Helper\ method\ to\ give\ physical\ address\n
comment19.params=relLoc
comment19.target=int\ offset(int)
comment2.params=
comment2.target=int\ getPC()
comment2.text=\n\ getPC\n\ \n\ @return\ the\ value\ of\ the\ program\ counter\n
comment3.params=
comment3.target=int\ getSP()
comment3.text=\n\ getSP\n\ \n\ @return\ the\ value\ of\ the\ stack\ pointer\n
comment4.params=
comment4.target=int\ getBASE()
comment4.text=\n\ getBASE\n\ \n\ @return\ the\ value\ of\ the\ base\ register\n
comment5.params=
comment5.target=int\ getLIM()
comment5.text=\n\ getLIMIT\n\ \n\ @return\ the\ value\ of\ the\ limit\ register\n
comment6.params=
comment6.target=int[]\ getRegisters()
comment6.text=\n\ getRegisters\n\ \n\ @return\ the\ registers\n
comment7.params=v
comment7.target=void\ setPC(int)
comment7.text=\n\ setPC\n\ \n\ @param\ v\n\ \ \ \ \ \ \ \ \ \ \ \ the\ new\ value\ of\ the\ program\ counter\n
comment8.params=v
comment8.target=void\ setSP(int)
comment8.text=\n\ setSP\n\ \n\ @param\ v\n\ \ \ \ \ \ \ \ \ \ \ \ the\ new\ value\ of\ the\ stack\ pointer\n
comment9.params=v
comment9.target=void\ setBASE(int)
comment9.text=\n\ setBASE\n\ \n\ @param\ v\n\ \ \ \ \ \ \ \ \ \ \ \ the\ new\ value\ of\ the\ base\ register\n
numComments=20
