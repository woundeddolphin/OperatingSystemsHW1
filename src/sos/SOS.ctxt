#BlueJ class context
comment0.params=c\ r
comment0.target=SOS(CPU,\ RAM)
comment0.text=\n\ The\ constructor\ does\ nothing\ special\n
comment1.params=s
comment1.target=void\ debugPrint(java.lang.String)
comment1.text=\n\ Does\ a\ System.out.print\ as\ long\ as\ m_verbose\ is\ true\n
comment10.params=
comment10.target=void\ output()
comment10.text=\n\ output\n\ prints\ pops\ parameter\ from\ stack\ and\ prints\ to\ terminal\n\n\ @param\ void\ the\ parameter\ is\ the\ last\ thing\ pushed\ on\ the\ stack\n\n\ @return\ void\n
comment11.params=
comment11.target=void\ pid()
comment11.text=\n\ pid\n\ pushes\ program\ id\ onto\ the\ stack\n\n\ @param\ void\n\n\ @return\ void\ return\ value\ is\ pushed\ onto\ the\ stack\n
comment12.params=
comment12.target=void\ coreDump()
comment12.text=\n\ coreDump\n\ prints\ current\ register\ states\ and\ last\ 3\ things\ pushed\ on\ the\ stack\ to\ the\ terminal\n\n\ @param\ void\n\n\ @return\ void\n
comment2.params=s
comment2.target=void\ debugPrintln(java.lang.String)
comment2.text=\n\ Does\ a\ System.out.println\ as\ long\ as\ m_verbose\ is\ true\n
comment3.params=prog\ allocSize
comment3.target=void\ createProcess(Program,\ int)
comment3.text=\n\ createProcess()\n\ \n\ @param\ prog\ \n\ @param\ size\ total\ allocated\ ram\ for\ the\ program\n\ \n\ Helper\ method\ to\ initialize\ system\ registers\ with\ appropriate\ values\n
comment4.params=loc\ size
comment4.target=void\ intializeRegisters(int,\ int)
comment4.text=\n\ intializeRegisters()\n\ \n\ @param\ loc\ location\ in\ ram\ to\ start\ the\ program\n\ @param\ size\ total\ allocated\ ram\ for\ the\ program\n\ \n\ Helper\ method\ to\ initialize\ system\ registers\ with\ appropriate\ values\n
comment5.params=addr
comment5.target=void\ interruptIllegalMemoryAccess(int)
comment5.text=\n\ interruptIllegalMemoryAcess\n\ Prints\ error\ message\ when\ useer\ touches\ memory\ that\ is\ not\ theirs.\n\n\ @param\ addr\ the\ address\ that\ was\ trying\ to\ be\ accessed\n\ @return\ void\n
comment6.params=
comment6.target=void\ interruptDivideByZero()
comment6.text=\n\ interruptDivideByZero\n\ Prints\ error\ message\ if\ division\ by\ zero\ is\ encountered\n\ \n\ @param\ void\n\ @return\ void\n
comment7.params=instr
comment7.target=void\ interruptIllegalInstruction(int[])
comment7.text=\n\ interuptIllegalInstruction\n\ Prints\ error\ message\ if\ there\ is\ something\ wrong\ with\ the\ fetched\ instruction\n\ \n\ @param\ insr\ The\ bad\ instruction\n\ @return\ void\n
comment8.params=
comment8.target=void\ systemCall()
comment8.text=\n\ systemCall\n\ call\ backs\ for\ handling\ trap\ from\ CPU\n\ \n\ @param\ void\n\n\ @return\ void\n\ \n
comment9.params=
comment9.target=void\ exit()
comment9.text=\n\ exit\n\ Current\ exits\ the\ simulation\n\n\ @param\ void\n\ @return\ void\n
numComments=13
